/* 
 * DroSimSystem.cpp
 * Root Component
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */
#include "DroSimSystem.h"
#include "Simulation.h"
#include "Wind.h"
#include "User.h"
#include "GeoZone.h"
#include "Objective.h"
#include "DroneSweep.h"
#include "DroneSpiral.h"

ASimulation* DroSimSystem::get_ASimulation() {
    return instASimulation;
}

AWind* DroSimSystem::get_AWind() {
    return instAWind;
}

AUser* DroSimSystem::get_AUser() {
    return instAUser;
}

AGeoZone* DroSimSystem::get_AGeoZone() {
    return instAGeoZone;
}

AObjective* DroSimSystem::get_AObjective() {
    return instAObjective;
}

ADroneSweep* DroSimSystem::get_ADroneSweep() {
    return instADroneSweep;
}

ADroneSpiral* DroSimSystem::get_ADroneSpiral() {
    return instADroneSpiral;
}

DroSimSystem::DroSimSystem() {
    //leafComponents = new std::vector<LeafComponent*>();
    instASimulation = new ASimulation(0.0);
    leafComponents.push_back(instASimulation);
    instAWind = new AWind(0.0);
    leafComponents.push_back(instAWind);
    instAUser = new AUser(0.0);
    leafComponents.push_back(instAUser);
    instAGeoZone = new AGeoZone(0.0);
    leafComponents.push_back(instAGeoZone);
    instAObjective = new AObjective(1.0);
    leafComponents.push_back(instAObjective);
    instADroneSweep = new ADroneSweep(1.0, 3);
    leafComponents.push_back(instADroneSweep);
    instADroneSpiral = new ADroneSpiral(2.0);
    leafComponents.push_back(instADroneSpiral);
    instADroneSweep->setAObjective(instAObjective);
    instADroneSpiral->setAObjective(instAObjective);
    instAUser->setrItfGeoDataUser(instAGeoZone->getAppli());
    instAObjective->setrItfGeoDataObj(instAGeoZone->getAppli());
    instADroneSweep->setrItfManageSimSweep(instAUser->getAppli());
    instADroneSweep->setrItfGeoDataSweep(instAGeoZone->getAppli());
    instADroneSweep->setrItfSimDataSweep(instASimulation->getAppli());
    instADroneSweep->setrItfWindForceSweep(instAWind->getAppli());
    instADroneSpiral->setrItfManageSimSpiral(instAUser->getAppli());
    instADroneSpiral->setrItfGeoDataSpiral(instAGeoZone->getAppli());
    instADroneSpiral->setrItfSimDataSpiral(instASimulation->getAppli());
    instADroneSpiral->setrItfWindForceSpiral(instAWind->getAppli());

    pSpeed = (14.0 + 28.0) / 2;
    instADroneSweep->setSpeed(pSpeed);
    instADroneSpiral->setSpeed(pSpeed);
    highestSpeed = 28.0;
    lowestSpeed = 14.0;
}

DroSimSystem::~DroSimSystem() {}

void DroSimSystem::initialize() {
    instASimulation->setExpectedEndTime(300000.0);
    instASimulation->setPositionCorrection(1.0);
    //instASimulation->setFrequency(0.0);
    instAWind->setForce(0.0);
    instAWind->setDirection(vect2(0.5, 0.5));
    //instAWind->setFrequency(0.0);
    instAUser->setMaxInlineZones(3);
    //instAUser->setFrequency(0.0);
    instAGeoZone->setEnvSize(vect2(1000.0, 1200.0));
    instAGeoZone->setBottomLeftPoint(vect2(45.0, -5.0));
    //instAGeoZone->setFrequency(0.0);
    instAObjective->setSpeedConstraint(0.0);
    instAObjective->setPosition(vect2(0, 0));
    //instAObjective->setFrequency(1.0);
    instADroneSweep->setMinSpeed(14.0);
    instADroneSweep->setMaxSpeed(28.0);
    instADroneSweep->setVisionRadius(100.0);
    instADroneSweep->setSweepHeight(200.0);
    instADroneSweep->setBatteryCapacity(200.0);
    instADroneSweep->setNumberOf(3);
    instADroneSweep->setStartingPoint(vect2(0.0, 0.0));
    //instADroneSweep->setFrequency(1.0);
    instADroneSpiral->setMinSpeed(14.0);
    instADroneSpiral->setMaxSpeed(28.0);
    instADroneSpiral->setVisionRadius(100.0);
    instADroneSpiral->setSpiralRadius(200.0);
    instADroneSpiral->setConcentricCircles(false);
    instADroneSpiral->setNbCirclePoints(8);
    instADroneSpiral->setSpiralIncrementFactor(3);
    instADroneSpiral->setWanderSteps(5);
    instADroneSpiral->setBatteryCapacity(900.0);
    instADroneSpiral->setNumberOf(0);
    instADroneSpiral->setStartingPoint(vect2(0.5, 0.5));
    //instADroneSpiral->setFrequency(2.0);

    // Calcultated attributes
    instAUser->setDroneCount(3 + 0);

    // Initialization
    if (instASimulation->getIsActive()) instASimulation->initialize();
    if (instAWind->getIsActive()) instAWind->initialize();
    if (instAUser->getIsActive()) instAUser->initialize();
    if (instAGeoZone->getIsActive()) instAGeoZone->initialize();
    if (instAObjective->getIsActive()) instAObjective->initialize();
    if (instADroneSweep->getIsActive()) instADroneSweep->initialize();
    if (instADroneSpiral->getIsActive()) instADroneSpiral->initialize();
    // Start of user code  : Implementation of initialize method DroSimSystem
    // End of user code
}

void DroSimSystem::end() {
    instASimulation->end();
    instAWind->end();
    instAUser->end();
    instAGeoZone->end();
    instAObjective->end();
    instADroneSweep->end();
    instADroneSpiral->end();
    // Start of user code  : Implementation of end method DroSimSystem
    // End of user code
}

bool DroSimSystem::mutateParameters(const bool isGroupSuccessful) {
    cout << (isGroupSuccessful ? "Success" : "Fail") << endl;

    double speed;
    if (isGroupSuccessful) {
        speed = floor((instADroneSweep->getSpeed() + lowestSpeed) / 2);
        highestSpeed = instADroneSweep->getSpeed();
    }
    else {
        speed = floor((instADroneSweep->getSpeed() + highestSpeed) / 2);
        lowestSpeed = instADroneSweep->getSpeed();
    }

    if (speed == pSpeed) return false;

    cout << "Last speed: " << pSpeed << " - New speed: " << speed << "\n";
    instADroneSweep->setSpeed(speed);
    pSpeed = speed;

    return true;
}

double DroSimSystem::getPSpeed() {
    return pSpeed;
}
