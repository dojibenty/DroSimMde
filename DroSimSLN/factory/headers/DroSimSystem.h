/* 
 * DroSimSystem.java
 * Root Component
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */
#ifndef DroSimSystem_H_
#define DroSimSystem_H_

//#include <vector>
//#include "LeafComponent.h"
#include "RootComponent.h"

#include "ASimulation.h"
#include "AWind.h"
#include "AUser.h"
#include "AGeoZone.h"
#include "AObjective.h"
#include "ADroneSweep.h"
#include "ADroneSpiral.h"
// Start of user code  : Additional imports for DroSimSystem
#include <tuple>
// End of user code

class DroSimSystem : public RootComponent {
    // generated pointers on child leafComponents
protected :
    ASimulation* instASimulation;
    AWind* instAWind;
    AUser* instAUser;
    AGeoZone* instAGeoZone;
    AObjective* instAObjective;
    ADroneSweep* instADroneSweep;
    ADroneSpiral* instADroneSpiral;

    double minSpeed;
    double maxSpeed;
    int maxBatCount;
    int maxNumberOf;
    double pSpeed = -1;
    int pNumberOf = -1;
    int pBatCount = -1;
    int cBatCount = -1;
    bool isCurveFound = false;
    bool isMaxFound = false;
    double speedIncrement;
    int numberOfIncrement;

    vector<tuple<double,int,int>> slowConfigs;
    tuple<double,int,int> fastConfig;

public :
    DroSimSystem();
    virtual ~DroSimSystem();
    // generated getters of child leafComponents
    ASimulation* get_ASimulation();
    AWind* get_AWind();
    AUser* get_AUser();
    AGeoZone* get_AGeoZone();
    AObjective* get_AObjective();
    ADroneSweep* get_ADroneSweep();
    ADroneSpiral* get_ADroneSpiral();

    void initialize();

    void end();
    int calculateMinBatteryCountForGroup(const double averageTimeToFind) const;
    bool continueCondition() const;
    vector<tuple<double, int, int>> getSlowConfigs();
    tuple<double, int, int> getFastConfig();
    void mutateParameters(bool isGroupSuccessful, double averageTimeToFind);
    void initializeForTest_StopsAfterOneStep();
    void initializeForTest_FindsInstantly();
    void initializeForTest_TooMuchWind();
};
#endif /*  DroSimSystem_H_ */
