/*
 * myPositionsLogLogObservationComponent
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

#include "myPositionsLogLogObservationComponent.h"
#include <iostream>
#include <string>
using namespace std;

myPositionsLogLogObservationComponent::myPositionsLogLogObservationComponent(string filename, double aFrequency):
    LogComponent(filename, aFrequency) {
    try {
        WriteFirstLine();
    }
    catch (exception& e) { cerr << "myPositionsLogLogObservationComponent : " << e.what() << endl; }
}

myPositionsLogLogObservationComponent::~myPositionsLogLogObservationComponent() {}

void myPositionsLogLogObservationComponent::readInputs() {
    instObjposition = theObjective->getObjposition();
    instSpiralposition = theDroneSpiral->getSpiralposition();
    instSweepposition = theDroneSweep->getSweepposition();
}

void myPositionsLogLogObservationComponent::WriteFirstLine() {
    string s = "time(ms)";
    s = s + ";" + "X.x;Y.y";
    s = s + ";" + "X.x;Y.y";
    s = s + ";" + "X.x;Y.y";
    writeNames(s);
    endLine();
}

void myPositionsLogLogObservationComponent::setObjective(Objective* myObjective) {
    theObjective = myObjective;
}

void myPositionsLogLogObservationComponent::setDroneSpiral(DroneSpiral* myDroneSpiral) {
    theDroneSpiral = myDroneSpiral;
}

void myPositionsLogLogObservationComponent::setDroneSweep(DroneSweep* myDroneSweep) {
    theDroneSweep = myDroneSweep;
}

void myPositionsLogLogObservationComponent::doStep(int nStep) {
    Clock* c = Clock::getInstance();
    readInputs();
    //int i = 0;
    long t = c->getCurrentMS();
    string s = to_string(t) + ";";
    try {
        s = s + to_string(instObjposition.getX()) + ";";
        s = s + to_string(instObjposition.getY()) + ";";
    }
    catch (exception& e) { cerr << e.what() << endl; }

    try {
        s = s + to_string(instSpiralposition.getX()) + ";";
        s = s + to_string(instSpiralposition.getY()) + ";";
    }
    catch (exception& e) { cerr << e.what() << endl; }

    try {
        s = s + to_string(instSweepposition.getX()) + ";";
        s = s + to_string(instSweepposition.getY()) + ";";
    }
    catch (exception& e) { cerr << e.what() << endl; }

    //on retire le dernier ";" separateur
    //s = s.substring(0, s.length() - 1);
    cout << "mySwimmerPositionLogObservationComponent::doStep : " << s << endl;
    writeNames(s);
    endLine();
}
