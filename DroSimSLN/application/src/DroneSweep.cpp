/*
 * DroneSweep.cpp
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

#include "DroneSweep.h"
#include "compDroneSweep.h"
// Start of user code  : Additional imports for DroneSweep
#include <sstream>
#define M_PER_DEG 111000
// End of user code


DroneSweep::DroneSweep(compDroneSweep* container, int ID) {
    myContainer = container;
    droneID = ID;
    rItfGeoDataSweep = 0;
    rItfWindForceSweep = 0;
    rItfManageSimSweep = 0;
    rItfSimDataSweep = 0;
    // Start of user code  : Implementation of constructor method
    // End of user code
}

DroneSweep::~DroneSweep() {
    // Start of user code  : Implementation of destructor method

    // End of user code
}

void DroneSweep::initialize() {
    // Start of user code  : Implementation of initialize method
    
    assignedZone = rItfGeoDataSweep->grabAssignedZone(droneID);
    
    leftYBound = assignedZone.getV1().getY();
    sweepLength = assignedZone.getV2().getY() - leftYBound;

    const auto bottomLeftPoint = vect2(assignedZone.getV2().getX(), assignedZone.getV1().getY());
    zoneStartPoint = bottomLeftPoint + startingPoint * bottomLeftPoint;
    
    direction = zoneStartPoint;
    direction.normalize();
    
    movementTolerance = rItfSimDataSweep->grabPositionCorrection();
    
    battery = batteryCapacity;
    batteryConsumption = 2 * pow(speedConstraint, 2) / 3600.0;
    // End of user code
}

void DroneSweep::end() {
    // Start of user code  : Implementation of end method
    // End of user code
}

void DroneSweep::doStep(int nStep) {
    // Start of user code  : Implementation of doStep method
    // Movement
    
    if (!isInZone)
        if (vect2::distance(position, zoneStartPoint) <= movementTolerance) {
            position = zoneStartPoint;
            isInZone = true;
        }

    position = SetNextPosition();
    sweepposition = position;

    // Objective detection
    if (vect2::distance(position, objposition) <= visionRadius
        && objposition.getX() > 0) {
        rItfManageSimSweep->signalObjectiveFound(droneID);
        end();
    }

    // Battery
    if ((batteryCapacity -= batteryConsumption) <= 0) end();
    // End of user code
}


// Start of user code  : Additional methods
vect2 DroneSweep::SetNextPosition() {
    if (!isInZone) return { position + direction * speedConstraint };
    
    const double targetHeight = sweepHeight * heightCount;
    if (goesVertical &&
        (!topToBottom && position.getX() >= targetHeight) || (topToBottom && position.getX() <= targetHeight)) {
        goesVertical = false;
        direction.setX(0.0);
        direction.setY(1.0);
        if (leftToRight) direction.switchSignY();
        leftToRight = !leftToRight;
        if (topToBottom) heightCount--;
        else heightCount++;
    }
    else if (position.getY() - speedConstraint < leftYBound
        || position.getY() + speedConstraint > sweepLength + leftYBound) {
        goesVertical = true;
        direction.setX(1.0);
        direction.setY(0.0);
        if (topToBottom) direction.switchSignX();
    }

    vect2 nextPosition = position + direction * speedConstraint;
    if (GoesOutOfBounds(nextPosition)) {
        if (goesVertical) {
            nextPosition = position - direction * speedConstraint;
            topToBottom = !topToBottom;
        }
        else if (leftToRight) nextPosition = position + direction * (assignedZone.getV2().getY() - position.getY());
        else nextPosition = position + direction * (position.getY() - assignedZone.getV1().getY());
    }

    return nextPosition;
}

bool DroneSweep::GoesOutOfBounds(vect2& point) {
    return point.getX() < assignedZone.getV2().getX()
        || point.getY() < assignedZone.getV1().getY()
        || point.getX() > assignedZone.getV1().getX()
        || point.getY() > assignedZone.getV2().getY();
}

void DroneSweep::setAssignedZone(wect2 zone) {
    assignedZone = zone;
}
// End of user code


void DroneSweep::setObjposition(vect2 arg) {
    objposition = arg;
}

vect2 DroneSweep::getSweepposition() {
    return sweepposition;
}

void DroneSweep::setrItfGeoDataSweep(ItfGeoDataInterface* arItfGeoDataSweep) {
    rItfGeoDataSweep = arItfGeoDataSweep;
}

void DroneSweep::setrItfWindForceSweep(ItfWindForceInterface* arItfWindForceSweep) {
    rItfWindForceSweep = arItfWindForceSweep;
}

void DroneSweep::setrItfManageSimSweep(ItfManageSimInterface* arItfManageSimSweep) {
    rItfManageSimSweep = arItfManageSimSweep;
}

void DroneSweep::setrItfSimDataSweep(ItfSimDataInterface* arItfSimDataSweep) {
    rItfSimDataSweep = arItfSimDataSweep;
}

// +++++++++++++ Access for speedConstraint parameter +++++++++++++
double DroneSweep::getSpeedConstraint() {
    return speedConstraint;
}

void DroneSweep::setSpeedConstraint(double arg) {
    speedConstraint = arg;
}

// +++++++++++++ Access for visionRadius parameter +++++++++++++
double DroneSweep::getVisionRadius() {
    return visionRadius;
}

void DroneSweep::setVisionRadius(double arg) {
    visionRadius = arg;
}

// +++++++++++++ Access for sweepHeight parameter +++++++++++++
double DroneSweep::getSweepHeight() {
    return sweepHeight;
}

void DroneSweep::setSweepHeight(double arg) {
    sweepHeight = arg;
}

// +++++++++++++ Access for batteryCapacity parameter +++++++++++++
double DroneSweep::getBatteryCapacity() {
    return batteryCapacity;
}

void DroneSweep::setBatteryCapacity(double arg) {
    batteryCapacity = arg;
}

// +++++++++++++ Access for numberOf parameter +++++++++++++
long DroneSweep::getNumberOf() {
    return numberOf;
}

void DroneSweep::setNumberOf(long arg) {
    numberOf = arg;
}

// +++++++++++++ Access for startingPoint parameter +++++++++++++
vect2 DroneSweep::getStartingPoint() {
    return startingPoint;
}

void DroneSweep::setStartingPoint(vect2 arg) {
    startingPoint = arg;
}
