/*
 * Wind.cpp
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

#include "Wind.h"
#include "User.h"
// Start of user code  : Additional imports for Wind
// End of user code


Wind::Wind(compWind* container) {
    myContainer = container;
    // Start of user code  : Implementation of constructor method

    // End of user code
}

Wind::~Wind() {
    // Start of user code  : Implementation of destructor method

    // End of user code
}

void Wind::initialize() {
    // Start of user code  : Implementation of initialize method
    windForce = force;
    windDirection = direction;
    // End of user code
}

void Wind::end() {
    // Start of user code  : Implementation of end method

    // End of user code
}

int Wind::doStep(int nStep) {
    // Start of user code  : Implementation of doStep method
    windForce += User::roundToDecimal(User::randRange(-1, 1)/10,2);
    if (windForce < 0) windForce = 0;
    const double dirModX = User::roundToDecimal(User::randRange(-1, 1)/10,2);
    const double dirModY = User::roundToDecimal(User::randRange(-1, 1)/10,2);
    windDirection += vect2(dirModX,dirModY);
    windDirection.normalize();
    return 0;
    // End of user code
}

// Start of user code  : Additional methods

// End of user code

double Wind::getWindForce() {
    return windForce;
}

vect2 Wind::getWindDirection() {
    return windDirection;
}

// +++++++++++++ Access for force parameter +++++++++++++
double Wind::getForce() {
    return force;
}

void Wind::setForce(double arg) {
    force = arg;
}

// +++++++++++++ Access for direction parameter +++++++++++++
vect2 Wind::getDirection() {
    return direction;
}

void Wind::setDirection(vect2 arg) {
    direction = arg;
}
