/*
 * DroneSpiral.h
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */
#ifndef DroneSpiral_H_
#define DroneSpiral_H_
#include "Clock.h"
class compDroneSpiral;
// Inputs
#include "vect2.h"

#include "ItfGeoDataInterface.h"
#include "wect2.h"
#include "ItfWindForceInterface.h"
#include "ItfManageSimInterface.h"
#include "ItfSimDataInterface.h"

// Start of user code  : Additional imports for DroneSpiral
// End of user code

class DroneSpiral {
protected :
    compDroneSpiral* myContainer;

    // Inputs
    vect2 objposition;
    // Outputs
    vect2 spiralposition;
    // Parameters
    double speedConstraint;
    double visionRadius;
    double spiralRadius;
    bool concentricCircles;
    long nbCirclePoints;
    double spiralIncrementFactor;
    long wanderSteps;
    double batteryCapacity;

    // Required Interfaces
    ItfGeoDataInterface* rItfGeoDataSpiral;
    ItfWindForceInterface* rItfWindForceSpiral;
    ItfManageSimInterface* rItfManageSimSpiral;
    ItfSimDataInterface* rItfSimDataSpiral;

    // Start of user code  : Properties of DroneSpiral
private:
    int droneID = 1;
    vect2 position;
    vect2 direction;
    double movementTolerance;
    bool isInZone = false;
    vect2 zoneStartPoint;
    wect2 assignedZone;
    int wander = 1;
    std::vector<vect2> circlePoints;
    int currentCirclePointID;
    vect2 currentCircleCenter;
    double currentSpiralIncrementFactor;
    // End of user code

public :
    DroneSpiral(compDroneSpiral* container);
    ~DroneSpiral();
    void initialize();
    void end();

    void doStep(int nStep);


    // Start of user code  : Additional methods
private:
    vect2 SetNextPosition();
    void SetCircle();
    vect2 GetRandomDirection();
    bool GoesOutOfBounds(vect2 point);

public:
    // End of user code


    void setObjposition(vect2 arg);

    vect2 getSpiralposition();
    void setrItfGeoDataSpiral(ItfGeoDataInterface* arItfGeoDataSpiral);
    void setrItfWindForceSpiral(ItfWindForceInterface* arItfWindForceSpiral);
    void setrItfManageSimSpiral(ItfManageSimInterface* arItfManageSimSpiral);
    void setrItfSimDataSpiral(ItfSimDataInterface* arItfSimDataSpiral);
    // +++++++++++++ Access for speedConstraint parameter +++++++++++++
    double getSpeedConstraint();

    void setSpeedConstraint(double arg);
    // +++++++++++++ Access for visionRadius parameter +++++++++++++
    double getVisionRadius();

    void setVisionRadius(double arg);
    // +++++++++++++ Access for spiralRadius parameter +++++++++++++
    double getSpiralRadius();

    void setSpiralRadius(double arg);
    // +++++++++++++ Access for concentricCircles parameter +++++++++++++
    bool getConcentricCircles();

    void setConcentricCircles(bool arg);
    // +++++++++++++ Access for nbCirclePoints parameter +++++++++++++
    long getNbCirclePoints();

    void setNbCirclePoints(long arg);
    // +++++++++++++ Access for spiralIncrementFactor parameter +++++++++++++
    double getSpiralIncrementFactor();

    void setSpiralIncrementFactor(double arg);
    // +++++++++++++ Access for wanderSteps parameter +++++++++++++
    long getWanderSteps();

    void setWanderSteps(long arg);
    // +++++++++++++ Access for batteryCapacity parameter +++++++++++++
    double getBatteryCapacity();

    void setBatteryCapacity(double arg);
};
#endif /*  DroneSpiral_H_ */
