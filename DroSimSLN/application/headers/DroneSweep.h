/*
 * DroneSweep.h
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */
#ifndef DroneSweep_H_
#define DroneSweep_H_
#include "ReturnCode.h"
class compDroneSweep;
// Inputs
#include "vect2.h"

#include "ItfGeoDataInterface.h"
#include "wect2.h"
#include "ItfManageSimInterface.h"
#include "ItfSimDataInterface.h"

// Start of user code  : Additional imports for DroneSweep
#define CONSUMPTION(speed) ((batConsoFactA+(batConsoFactB*(pow(speed,2.0))))/3600.0)
// End of user code

class DroneSweep {
protected :
    compDroneSweep* myContainer;

    // Inputs
    vect2 objposition;
    double windForce;
    vect2 windDirection;
    // Outputs
    vect2 sweepposition;
    // Parameters
    double minSpeed;
    double maxSpeed;
    double visionRadius;
    double sweepHeight;
    double batteryCapacity;
    vect2 startingPoint;
    double collisionRadius;

    // Required Interfaces
    ItfGeoDataInterface* rItfGeoDataSweep;
    ItfManageSimInterface* rItfManageSimSweep;
    ItfSimDataInterface* rItfSimDataSweep;

    // Start of user code  : Properties of DroneSweep
private:
    int ID;
    double speed;
    vect2 position;
    vect2 direction;
    double batteryConsumption;
    double batConsoFactA;
    double batConsoFactB;
    double battery;
    double movementTolerance;
    wect2 assignedZone;
    bool goesVertical;
    bool leftToRight;
    bool topToBottom;
    long heightCount;
    double sweepLength;
    double leftYBound;
    bool isInZone;
    vect2 zoneStartPoint;
    double windInfluence = 0.6;
    int cpt;
    // End of user code

public :
    DroneSweep(compDroneSweep* container, int ID);
    ~DroneSweep();
    void initialize();
    void end();

    ReturnCode doStep(int nStep);
    void step(const vect2& objposition, double windForce, const vect2& windDirection);
    void move();
    void consumeBattery(double windForce, const vect2& windDirection);
    bool condObjectiveFound();
    bool condLowBattery();


    // Start of user code  : Additional methods
private:
    vect2 setNextPosition();
    bool goesOutOfBounds(vect2& point);

public:
    void setAssignedZone(wect2 zone);
    void printRecap();
    double getSpeed() { return speed; }
    void setSpeed(double arg) { speed = arg; }
    int getID() { return ID; }
    vect2& getPosition() { return position; }
    void setPosition(const vect2& arg) { position = arg; }
    // End of user code


    void setObjposition(vect2 arg);
    void setWindForce(double arg);
    void setWindDirection(vect2 arg);

    vect2 getSweepposition();
    ItfGeoDataInterface* getItfGeoDataInterface() { return rItfGeoDataSweep; }
    void setrItfGeoDataSweep(ItfGeoDataInterface* arItfGeoDataSweep);
    ItfManageSimInterface* getItfManageSimInterface() { return rItfManageSimSweep; }
    void setrItfManageSimSweep(ItfManageSimInterface* arItfManageSimSweep);
    ItfSimDataInterface* getItfSimDataInterface() { return rItfSimDataSweep; }
    void setrItfSimDataSweep(ItfSimDataInterface* arItfSimDataSweep);
    // +++++++++++++ Access for minSpeed parameter +++++++++++++
    double getMinSpeed();

    void setMinSpeed(double arg);
    // +++++++++++++ Access for minSpeed parameter +++++++++++++
    double getMaxSpeed();

    void setMaxSpeed(double arg);
    // +++++++++++++ Access for visionRadius parameter +++++++++++++
    double getVisionRadius();

    void setVisionRadius(double arg);
    // +++++++++++++ Access for sweepHeight parameter +++++++++++++
    double getSweepHeight();

    void setSweepHeight(double arg);
    // +++++++++++++ Access for batteryCapacity parameter +++++++++++++
    double getBatteryCapacity();

    void setBatteryCapacity(double arg);
    // +++++++++++++ Access for startingPoint parameter +++++++++++++
    vect2 getStartingPoint();

    void setStartingPoint(vect2 arg);
    // +++++++++++++ Access for collisionRadius parameter +++++++++++++
    double getCollisionRadius();

    void setCollisionRadius(double arg);
};
#endif /*  DroneSweep_H_ */
