/*
 * DroneSweep.h
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */
#ifndef DroneSweep_H_
#define DroneSweep_H_
#include "Clock.h"
class compDroneSweep;
// Inputs
#include "vect2.h"

#include "ItfGeoDataInterface.h"
#include "wect2.h"
#include "ItfWindForceInterface.h"
#include "ItfManageSimInterface.h"
#include "ItfSimDataInterface.h"

// Start of user code  : Additional imports for DroneSweep
// End of user code

class DroneSweep {
protected :
    compDroneSweep* myContainer;

    // Inputs
    vect2 objposition;
    // Outputs
    vect2 sweepposition;
    // Parameters
    double speedConstraint;
    double visionRadius;
    double sweepHeight;
    double batteryCapacity;

    // Required Interfaces
    ItfGeoDataInterface* rItfGeoDataSweep;
    ItfWindForceInterface* rItfWindForceSweep;
    ItfManageSimInterface* rItfManageSimSweep;
    ItfSimDataInterface* rItfSimDataSweep;

    // Start of user code  : Properties of DroneSweep
protected:
    wect2 assignedZone;

private:
    int droneID = 0;
    vect2 position;
    vect2 direction;
    double movementTolerance;
    bool goesUp = false;
    bool leftToRight = true;
    bool topToBottom = false;
    long heightCount = 0;
    double sweepLength;
    double leftYBound;
    bool isInZone = false;
    vect2 zoneStartPoint;
    // End of user code

public :
    DroneSweep(compDroneSweep* container);
    ~DroneSweep();
    void initialize();
    void end();

    void doStep(int nStep);


    // Start of user code  : Additional methods
private:
    vect2 SetNextPosition();
    bool GoesOutOfBounds(vect2& point);

public:
    void setAssignedZone(wect2 zone);
    // End of user code


    void setObjposition(vect2 arg);

    vect2 getSweepposition();
    void setrItfGeoDataSweep(ItfGeoDataInterface* arItfGeoDataSweep);
    void setrItfWindForceSweep(ItfWindForceInterface* arItfWindForceSweep);
    void setrItfManageSimSweep(ItfManageSimInterface* arItfManageSimSweep);
    void setrItfSimDataSweep(ItfSimDataInterface* arItfSimDataSweep);
    // +++++++++++++ Access for speedConstraint parameter +++++++++++++
    double getSpeedConstraint();

    void setSpeedConstraint(double arg);
    // +++++++++++++ Access for visionRadius parameter +++++++++++++
    double getVisionRadius();

    void setVisionRadius(double arg);
    // +++++++++++++ Access for sweepHeight parameter +++++++++++++
    double getSweepHeight();

    void setSweepHeight(double arg);
    // +++++++++++++ Access for batteryCapacity parameter +++++++++++++
    double getBatteryCapacity();

    void setBatteryCapacity(double arg);
};
#endif /*  DroneSweep_H_ */
