/*
 * vect2
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */
#include "vect2.h"

// Start of user code  : Additional imports for vect2
#include <sstream>
// End of user code

vect2::vect2() {}
vect2::~vect2() {}

vect2::vect2(double varx, double vary) {
    x = varx;
    y = vary;
}

double vect2::getX() {
    return x;
}

void vect2::setX(double varx) {
    x = varx;
}

double vect2::getY() {
    return y;
}

void vect2::setY(double vary) {
    y = vary;
}

// Start of user code  : Additional methods
void vect2::switchSignX() {
    x *= -1;
}

void vect2::switchSignY() {
    y *= -1;
}

vect2 vect2::operator+(const vect2& vect2) const {
    return {x + vect2.x, y + vect2.y};
}

vect2& vect2::operator+=(const vect2& vect2) {
    this->x += vect2.x;
    this->y += vect2.y;
    return *this;
}

vect2& vect2::operator+=(const double arg) {
    this->x += arg;
    this->y += arg;
    return *this;
}

vect2 vect2::operator*(const double arg) const {
    return {x * arg, y * arg};
}

vect2 vect2::operator*(const vect2& vect2) const {
    return {x * vect2.x, y * vect2.y};
}

vect2 vect2::operator-(const vect2& vect2) const {
    return {x - vect2.x, y - vect2.y};
}

vect2 vect2::operator/(const double arg) const {
    return {x / arg, y / arg};
}

bool vect2::operator==(const vect2& vect2) const {
    return {x == vect2.x && y == vect2.y};
}

bool vect2::operator<(const vect2& vect2) const {
    return {x < vect2.x && y < vect2.y};
}

void vect2::normalize() {
    const double mag = sqrt(x * x + y * y);
    if (mag != 0.0) *this = *this / mag;
}

double vect2::distance(vect2& v1, vect2& v2) {
    return sqrt(pow(v2.x - v1.x, 2) + pow(v2.y - v1.y, 2));
}

int vect2::alignment(const vect2& other) const {
    const double dif = abs(other.x - x) + abs(other.y - y);
    if (dif < 1) return 0; // parallel
    if (dif < 2) return 1; // perpendicular
    return 2; // opposite
}

string vect2::toString() const {
    stringstream ss;
    ss << '(' << x << ',' << y << ')';
    return ss.str();
}

// End of user code
