/*
 * DroneSweep.cpp
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

#include "compDroneSweep.h"
#include "DroneSweep.h"

compDroneSweep::compDroneSweep(double aFrequency) : LeafComponent(aFrequency) {
    appli = new DroneSweep(this);
    delay = 0;
    delayMax = 0;
    newValue = false;
    isActive = true;
    oldSweepposition = appli->getSweepposition();
    newSweepposition = appli->getSweepposition();
}

compDroneSweep::~compDroneSweep() {}

void compDroneSweep::doOneStep() {
    if (newValue) {
        delay++;
        if (delay == delayMax) {
            oldSweepposition = newSweepposition;
            newValue = false;
        }
    }
}

void compDroneSweep::doStep(int nStep) {
    if (newValue) {
        oldSweepposition = newSweepposition;
        newValue = false;
    }
    readInputs();
    appli->doStep(nStep);
    newSweepposition = appli->getSweepposition();
    if (delayMax == 0) {
        oldSweepposition = newSweepposition;
        newValue = false;
    }
    else {
        newValue = true;
        delay = 0;
    }
}

void compDroneSweep::readInputs() {}

void compDroneSweep::initialize() {
    appli->initialize();
}

void compDroneSweep::end() {
    appli->end();
}

vect2 compDroneSweep::getSweepposition() {
    return oldSweepposition;
}

void compDroneSweep::setrItfGeoDataSweep(ItfGeoDataInterface* arItfGeoDataSweep) {
    appli->setrItfGeoDataSweep(arItfGeoDataSweep);
}

void compDroneSweep::setrItfWindForceSweep(ItfWindForceInterface* arItfWindForceSweep) {
    appli->setrItfWindForceSweep(arItfWindForceSweep);
}

void compDroneSweep::setrItfManageSimSweep(ItfManageSimInterface* arItfManageSimSweep) {
    appli->setrItfManageSimSweep(arItfManageSimSweep);
}

void compDroneSweep::setrItfSimDataSweep(ItfSimDataInterface* arItfSimDataSweep) {
    appli->setrItfSimDataSweep(arItfSimDataSweep);
}

DroneSweep* compDroneSweep::getAppli() {
    return appli;
}

// +++++++++++++ Access for speedConstraint parameter +++++++++++++
double compDroneSweep::getSpeedConstraint() {
    return appli->getSpeedConstraint();
}

void compDroneSweep::setSpeedConstraint(double arg) {
    appli->setSpeedConstraint(arg);
}

// +++++++++++++ Access for visionRadius parameter +++++++++++++
double compDroneSweep::getVisionRadius() {
    return appli->getVisionRadius();
}

void compDroneSweep::setVisionRadius(double arg) {
    appli->setVisionRadius(arg);
}

// +++++++++++++ Access for sweepHeight parameter +++++++++++++
double compDroneSweep::getSweepHeight() {
    return appli->getSweepHeight();
}

void compDroneSweep::setSweepHeight(double arg) {
    appli->setSweepHeight(arg);
}

// +++++++++++++ Access for batteryCapacity parameter +++++++++++++
double compDroneSweep::getBatteryCapacity() {
    return appli->getBatteryCapacity();
}

void compDroneSweep::setBatteryCapacity(double arg) {
    appli->setBatteryCapacity(arg);
}
