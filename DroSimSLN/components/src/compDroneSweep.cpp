/*
 * DroneSweep.cpp
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

#include "compDroneSweep.h"
#include "DroneSweep.h"

compDroneSweep::compDroneSweep(double aFrequency, const int ID) : LeafComponent(aFrequency) {
    appli = new DroneSweep(this, ID);
    oldSweepposition = appli->getSweepposition();
    newSweepposition = appli->getSweepposition();
    delay = 0;
    delayMax = 0;
    newValue = false;
    isActive = true;
    objectcode_ = objDroneSweep;
}

compDroneSweep::~compDroneSweep() = default;

void compDroneSweep::doOneStep() {
    if (newValue) {
        delay++;
        if (delay == delayMax) {
            oldSweepposition = newSweepposition;
            newValue = false;
        }
    }
}

ReturnCode compDroneSweep::doStep(int nStep) {
    if (newValue) {
        oldSweepposition = newSweepposition;
        newValue = false;
    }

    readInputs();

    const auto rc = appli->doStep(nStep);
    newSweepposition = appli->getSweepposition();

    if (delayMax == 0) {
        oldSweepposition = newSweepposition;
        newValue = false;
    }
    else {
        newValue = true;
        delay = 0;
    }
    
    return rc;
}

void compDroneSweep::readInputs() {}

void compDroneSweep::initialize() {
    appli->setPosition(vect2(0.0, appli->getID() * 20));
    appli->initialize();
}

void compDroneSweep::end() {
    appli->end();
}

vect2 compDroneSweep::getSweepposition() {
    return oldSweepposition;
}

int compDroneSweep::getID() {
    return appli->getID();
}

vect2& compDroneSweep::getPosition() {
    return appli->getPosition();
}


void compDroneSweep::setrItfGeoDataSweep(ItfGeoDataInterface* arItfGeoDataSweep) {
    appli->setrItfGeoDataSweep(arItfGeoDataSweep);
}

void compDroneSweep::setrItfManageSimSweep(ItfManageSimInterface* arItfManageSimSweep) {
    appli->setrItfManageSimSweep(arItfManageSimSweep);
}

void compDroneSweep::setrItfSimDataSweep(ItfSimDataInterface* arItfSimDataSweep) {
    appli->setrItfSimDataSweep(arItfSimDataSweep);
}

DroneSweep* compDroneSweep::getAppli() {
    return appli;
}

// +++++++++++++ Access for minSpeed parameter +++++++++++++
double compDroneSweep::getMinSpeed() {
    return appli->getMinSpeed();
}

void compDroneSweep::setMinSpeed(double arg) {
    appli->setMinSpeed(arg);
}

// +++++++++++++ Access for minSpeed parameter +++++++++++++
double compDroneSweep::getMaxSpeed() {
    return appli->getMaxSpeed();
}

void compDroneSweep::setMaxSpeed(double arg) {
    appli->setMaxSpeed(arg);
}

// +++++++++++++ Access for visionRadius parameter +++++++++++++
double compDroneSweep::getVisionRadius() {
    return appli->getVisionRadius();
}

void compDroneSweep::setVisionRadius(double arg) {
    appli->setVisionRadius(arg);
}

// +++++++++++++ Access for sweepHeight parameter +++++++++++++
double compDroneSweep::getSweepHeight() {
    return appli->getSweepHeight();
}

void compDroneSweep::setSweepHeight(double arg) {
    appli->setSweepHeight(arg);
}

// +++++++++++++ Access for batteryCapacity parameter +++++++++++++
double compDroneSweep::getBatteryCapacity() {
    return appli->getBatteryCapacity();
}

void compDroneSweep::setBatteryCapacity(double arg) {
    appli->setBatteryCapacity(arg);
}

// +++++++++++++ Access for startingPoint parameter +++++++++++++
vect2 compDroneSweep::getStartingPoint() {
    return appli->getStartingPoint();
}

void compDroneSweep::setStartingPoint(vect2 arg) {
    appli->setStartingPoint(arg);
}

// +++++++++++++ Access for collisionRadius parameter +++++++++++++
double compDroneSweep::getCollisionRadius() {
    return appli->getCollisionRadius();
}

void compDroneSweep::setCollisionRadius(double arg) {
    appli->setCollisionRadius(arg);
}

// +++++++++++++ Access for speed parameter +++++++++++++
double compDroneSweep::getSpeed() {
    return appli->getSpeed();
}

void compDroneSweep::setSpeed(double arg) {
    appli->setSpeed(arg);
}
