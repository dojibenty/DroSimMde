/*
 * DroneSweep.cpp
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

#include "compDroneSweep.h"
#include "DroneSweep.h"

compDroneSweep::compDroneSweep(double aFrequency, long numberOf) : LeafComponent(aFrequency) {
    for (int i = 0; i < numberOf; i++) {
        auto obj = new DroneSweep(this, i);
        appli.emplace_back(obj);
        oldSweepposition.push_back(obj->getSweepposition());
        newSweepposition.push_back(obj->getSweepposition());
    }
    delay = 0;
    delayMax = 0;
    newValue = false;
    isActive = true;
}

compDroneSweep::~compDroneSweep() {}

void compDroneSweep::doOneStep() {
    if (newValue) {
        delay++;
        if (delay == delayMax) {
            oldSweepposition = newSweepposition;
            newValue = false;
        }
    }
}

void compDroneSweep::doStep(int nStep) {
    if (newValue) {
        oldSweepposition = newSweepposition;
        newValue = false;
    }
    readInputs();
    int numberOf = getNumberOf();
    for (int i = 0; i < numberOf; i++) {
        appli[i]->doStep(nStep);
        newSweepposition[i] = appli[i]->getSweepposition();
    }
    if (delayMax == 0) {
        oldSweepposition = newSweepposition;
        newValue = false;
    }
    else {
        newValue = true;
        delay = 0;
    }
}

void compDroneSweep::readInputs() {}

void compDroneSweep::initialize() {
    for (DroneSweep* obj : appli)
        obj->initialize();
}

void compDroneSweep::end() {
    for (DroneSweep* obj : appli)
        obj->end();
}

vector<vect2> compDroneSweep::getSweepposition() {
    return oldSweepposition;
}

void compDroneSweep::setrItfGeoDataSweep(ItfGeoDataInterface* arItfGeoDataSweep) {
    for (DroneSweep* obj : appli)
        obj->setrItfGeoDataSweep(arItfGeoDataSweep);
}

void compDroneSweep::setrItfWindForceSweep(ItfWindForceInterface* arItfWindForceSweep) {
    for (DroneSweep* obj : appli)
        obj->setrItfWindForceSweep(arItfWindForceSweep);
}

void compDroneSweep::setrItfManageSimSweep(ItfManageSimInterface* arItfManageSimSweep) {
    cout << arItfManageSimSweep << '\n';
    for (DroneSweep* obj : appli)
        obj->setrItfManageSimSweep(arItfManageSimSweep);
}

void compDroneSweep::setrItfSimDataSweep(ItfSimDataInterface* arItfSimDataSweep) {
    for (DroneSweep* obj : appli)
        obj->setrItfSimDataSweep(arItfSimDataSweep);
}

vector<DroneSweep*> compDroneSweep::getAppli() {
    return appli;
}

// +++++++++++++ Access for speedConstraint parameter +++++++++++++
double compDroneSweep::getSpeedConstraint() {
    return appli[0]->getSpeedConstraint();
}

void compDroneSweep::setSpeedConstraint(double arg) {
    for (DroneSweep* obj : appli)
        obj->setSpeedConstraint(arg);
}

// +++++++++++++ Access for visionRadius parameter +++++++++++++
double compDroneSweep::getVisionRadius() {
    return appli[0]->getVisionRadius();
}

void compDroneSweep::setVisionRadius(double arg) {
    for (DroneSweep* obj : appli)
        obj->setVisionRadius(arg);
}

// +++++++++++++ Access for sweepHeight parameter +++++++++++++
double compDroneSweep::getSweepHeight() {
    return appli[0]->getSweepHeight();
}

void compDroneSweep::setSweepHeight(double arg) {
    for (DroneSweep* obj : appli)
        obj->setSweepHeight(arg);
}

// +++++++++++++ Access for batteryCapacity parameter +++++++++++++
double compDroneSweep::getBatteryCapacity() {
    return appli[0]->getBatteryCapacity();
}

void compDroneSweep::setBatteryCapacity(double arg) {
    for (DroneSweep* obj : appli)
        obj->setBatteryCapacity(arg);
}

// +++++++++++++ Access for numberOf parameter +++++++++++++
long compDroneSweep::getNumberOf() {
    return appli[0]->getNumberOf();
}

void compDroneSweep::setNumberOf(long arg) {
    for (DroneSweep* obj : appli)
        obj->setNumberOf(arg);
}

// +++++++++++++ Access for startingPoint parameter +++++++++++++
vect2 compDroneSweep::getStartingPoint() {
    return appli[0]->getStartingPoint();
}

void compDroneSweep::setStartingPoint(vect2 arg) {
    for (DroneSweep* obj : appli)
        obj->setStartingPoint(arg);
}