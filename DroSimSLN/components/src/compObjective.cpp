/*
 * Objective.cpp
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

#include "compObjective.h"
#include "Objective.h"
#include "ReturnCode.h"

compObjective::compObjective(double aFrequency) : LeafComponent(aFrequency) {
    appli = new Objective(this);
    delay = 0;
    delayMax = 0;
    newValue = false;
    isActive = true;
    oldObjposition = appli->getObjposition();
    newObjposition = appli->getObjposition();
    objectcode_ = objObjective;
}

compObjective::~compObjective() {}

void compObjective::doOneStep() {
    if (newValue) {
        delay++;
        if (delay == delayMax) {
            oldObjposition = newObjposition;
            newValue = false;
        }
    }
}

ReturnCode compObjective::doStep(int nStep) {
    if (newValue) {
        oldObjposition = newObjposition;
        newValue = false;
    }
    readInputs();
    const auto returnCode = appli->doStep(nStep);
    newObjposition = appli->getObjposition();
    if (delayMax == 0) {
        oldObjposition = newObjposition;
        newValue = false;
    }
    else {
        newValue = true;
        delay = 0;
    }
    return returnCode;
}

void compObjective::readInputs() {}

void compObjective::initialize() {
    appli->initialize();
}

void compObjective::end() {
    appli->end();
}

vect2 compObjective::getObjposition() {
    return oldObjposition;
}

void compObjective::setrItfGeoDataObj(ItfGeoDataInterface* arItfGeoDataObj) {
    appli->setrItfGeoDataObj(arItfGeoDataObj);
}

Objective* compObjective::getAppli() {
    return appli;
}

// +++++++++++++ Access for speedConstraint parameter +++++++++++++
double compObjective::getSpeedConstraint() {
    return appli->getSpeedConstraint();
}

void compObjective::setSpeedConstraint(double arg) {
    appli->setSpeedConstraint(arg);
}

// +++++++++++++ Access for position parameter +++++++++++++
vect2 compObjective::getPosition() {
    return appli->getPosition();
}

void compObjective::setPosition(vect2 arg) {
    appli->setPosition(arg);
}
