/*
 * DroneSpiral.cpp
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

#include "compDroneSpiral.h"
#include "DroneSpiral.h"

compDroneSpiral::compDroneSpiral(double aFrequency, const int ID) : LeafComponent(aFrequency) {
    appli = new DroneSpiral(this,ID);
    delay = 0;
    delayMax = 0;
    newValue = false;
    isActive = true;
    objectcode_ = objDroneSpiral;
    oldSpiralposition = appli->getSpiralposition();
    newSpiralposition = appli->getSpiralposition();
}

compDroneSpiral::~compDroneSpiral() {}

void compDroneSpiral::doOneStep() {
    if (newValue) {
        delay++;
        if (delay == delayMax) {
            oldSpiralposition = newSpiralposition;
            newValue = false;
        }
    }
}

ReturnCode compDroneSpiral::doStep(int nStep) {
    if (newValue) {
        oldSpiralposition = newSpiralposition;
        newValue = false;
    }
    readInputs();
    const auto returnCode = appli->doStep(nStep);
    newSpiralposition = appli->getSpiralposition();
    if (delayMax == 0) {
        oldSpiralposition = newSpiralposition;
        newValue = false;
    }
    else {
        newValue = true;
        delay = 0;
    }
    return returnCode;
}

void compDroneSpiral::readInputs() {}

void compDroneSpiral::initialize() {
    appli->initialize();
}

void compDroneSpiral::end() {
    appli->end();
}

vect2 compDroneSpiral::getSpiralposition() {
    return oldSpiralposition;
}

void compDroneSpiral::setrItfGeoDataSpiral(ItfGeoDataInterface* arItfGeoDataSpiral) {
    appli->setrItfGeoDataSpiral(arItfGeoDataSpiral);
}

void compDroneSpiral::setrItfManageSimSpiral(ItfManageSimInterface* arItfManageSimSpiral) {
    appli->setrItfManageSimSpiral(arItfManageSimSpiral);
}

void compDroneSpiral::setrItfSimDataSpiral(ItfSimDataInterface* arItfSimDataSpiral) {
    appli->setrItfSimDataSpiral(arItfSimDataSpiral);
}

DroneSpiral* compDroneSpiral::getAppli() {
    return appli;
}

// +++++++++++++ Access for minSpeed parameter +++++++++++++
double compDroneSpiral::getMinSpeed() {
    return appli->getMinSpeed();
}

void compDroneSpiral::setMinSpeed(double arg) {
    appli->setMinSpeed(arg);
}

// +++++++++++++ Access for minSpeed parameter +++++++++++++
double compDroneSpiral::getMaxSpeed() {
    return appli->getMaxSpeed();
}

void compDroneSpiral::setMaxSpeed(double arg) {
    appli->setMaxSpeed(arg);
}

// +++++++++++++ Access for visionRadius parameter +++++++++++++
double compDroneSpiral::getVisionRadius() {
    return appli->getVisionRadius();
}

void compDroneSpiral::setVisionRadius(double arg) {
    appli->setVisionRadius(arg);
}

// +++++++++++++ Access for spiralRadius parameter +++++++++++++
double compDroneSpiral::getSpiralRadius() {
    return appli->getSpiralRadius();
}

void compDroneSpiral::setSpiralRadius(double arg) {
    appli->setSpiralRadius(arg);
}

// +++++++++++++ Access for concentricCircles parameter +++++++++++++
bool compDroneSpiral::getConcentricCircles() {
    return appli->getConcentricCircles();
}

void compDroneSpiral::setConcentricCircles(bool arg) {
    appli->setConcentricCircles(arg);
}

// +++++++++++++ Access for nbCirclePoints parameter +++++++++++++
long compDroneSpiral::getNbCirclePoints() {
    return appli->getNbCirclePoints();
}

void compDroneSpiral::setNbCirclePoints(long arg) {
    appli->setNbCirclePoints(arg);
}

// +++++++++++++ Access for spiralIncrementFactor parameter +++++++++++++
double compDroneSpiral::getSpiralIncrementFactor() {
    return appli->getSpiralIncrementFactor();
}

void compDroneSpiral::setSpiralIncrementFactor(double arg) {
    appli->setSpiralIncrementFactor(arg);
}

// +++++++++++++ Access for wanderSteps parameter +++++++++++++
long compDroneSpiral::getWanderSteps() {
    return appli->getWanderSteps();
}

void compDroneSpiral::setWanderSteps(long arg) {
    appli->setWanderSteps(arg);
}

// +++++++++++++ Access for batteryCapacity parameter +++++++++++++
double compDroneSpiral::getBatteryCapacity() {
    return appli->getBatteryCapacity();
}

void compDroneSpiral::setBatteryCapacity(double arg) {
    appli->setBatteryCapacity(arg);
}

// +++++++++++++ Access for numberOf parameter +++++++++++++
long compDroneSpiral::getNumberOf() {
    return appli->getNumberOf();
}

void compDroneSpiral::setNumberOf(long arg) {
    appli->setNumberOf(arg);
}

// +++++++++++++ Access for startingPoint parameter +++++++++++++
vect2 compDroneSpiral::getStartingPoint() {
    return appli->getStartingPoint();
}

void compDroneSpiral::setStartingPoint(vect2 arg) {
    appli->setStartingPoint(arg);
}
