/*
 * DroneSpiral.cpp
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

#include "compDroneSpiral.h"
#include "DroneSpiral.h"
compDroneSpiral::compDroneSpiral(double aFrequency) : LeafComponent( aFrequency) {
		appli = new DroneSpiral( this);
		delay = 0;
		delayMax = 0;
		newValue = false;
		isActive = true;
	}
compDroneSpiral::~compDroneSpiral()	{}

void compDroneSpiral::doOneStep() {
		if (newValue) {
			delay++;
			if (delay == delayMax) {
			}
		}
	}

void compDroneSpiral::doStep(int nStep) {	
		if (newValue) {
		}
		readInputs();
		appli->doStep(nStep);
		if (delayMax == 0) {
			newValue = false;
		} else {
			newValue = true;
			delay = 0;
		}
	}

void compDroneSpiral::readInputs() {
	}
void compDroneSpiral::initialize() {
		appli->initialize();
	}
void compDroneSpiral::lateinitialize() {
	appli->lateinitialize();
}

void compDroneSpiral::end() {
		appli->end();
	}
	
void compDroneSpiral::setrItfEnvironmentSpiral(ItfEnvironmentInterface *arItfEnvironmentSpiral) {
		appli->setrItfEnvironmentSpiral(arItfEnvironmentSpiral);
	}
void compDroneSpiral::setrItfManagerSpiral(ItfManagerInterface *arItfManagerSpiral) {
		appli->setrItfManagerSpiral(arItfManagerSpiral);
	}
DroneSpiral *compDroneSpiral::getAppli() {
		return appli;
	}
	// +++++++++++++ Access for ID parameter +++++++++++++
long compDroneSpiral::getID() {
		return appli->getID();
	}
	
void compDroneSpiral::setID(long arg) {
		appli->setID(arg);
	}
	// +++++++++++++ Access for speed parameter +++++++++++++
double compDroneSpiral::getSpeed() {
		return appli->getSpeed();
	}
	
void compDroneSpiral::setSpeed(double arg) {
		appli->setSpeed(arg);
	}
	// +++++++++++++ Access for position parameter +++++++++++++
vect2 compDroneSpiral::getPosition() {
		return appli->getPosition();
	}
	
void compDroneSpiral::setPosition(vect2 arg) {
		appli->setPosition(arg);
	}
	// +++++++++++++ Access for direction parameter +++++++++++++
vect2 compDroneSpiral::getDirection() {
		return appli->getDirection();
	}
	
void compDroneSpiral::setDirection(vect2 arg) {
		appli->setDirection(arg);
	}
	// +++++++++++++ Access for visionRadius parameter +++++++++++++
double compDroneSpiral::getVisionRadius() {
		return appli->getVisionRadius();
	}
	
void compDroneSpiral::setVisionRadius(double arg) {
		appli->setVisionRadius(arg);
	}
	// +++++++++++++ Access for spiralRadius parameter +++++++++++++
double compDroneSpiral::getSpiralRadius() {
		return appli->getSpiralRadius();
	}
	
void compDroneSpiral::setSpiralRadius(double arg) {
		appli->setSpiralRadius(arg);
	}
	// +++++++++++++ Access for concentricCircles parameter +++++++++++++
bool compDroneSpiral::getConcentricCircles() {
		return appli->getConcentricCircles();
	}
	
void compDroneSpiral::setConcentricCircles(bool arg) {
		appli->setConcentricCircles(arg);
	}
	// +++++++++++++ Access for nbCirclePoints parameter +++++++++++++
long compDroneSpiral::getNbCirclePoints() {
		return appli->getNbCirclePoints();
	}
	
void compDroneSpiral::setNbCirclePoints(long arg) {
		appli->setNbCirclePoints(arg);
	}
	// +++++++++++++ Access for spiralIncrementFactor parameter +++++++++++++
double compDroneSpiral::getSpiralIncrementFactor() {
		return appli->getSpiralIncrementFactor();
	}
	
void compDroneSpiral::setSpiralIncrementFactor(double arg) {
		appli->setSpiralIncrementFactor(arg);
	}
	// +++++++++++++ Access for wanderSteps parameter +++++++++++++
long compDroneSpiral::getWanderSteps() {
		return appli->getWanderSteps();
	}
	
void compDroneSpiral::setWanderSteps(long arg) {
		appli->setWanderSteps(arg);
	}
	// +++++++++++++ Access for movementTolerance parameter +++++++++++++
double compDroneSpiral::getMovementTolerance() {
		return appli->getMovementTolerance();
	}
	
void compDroneSpiral::setMovementTolerance(double arg) {
		appli->setMovementTolerance(arg);
	}

