/*
 * Environment.cpp
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

#include "compEnvironment.h"
#include "Environment.h"
compEnvironment::compEnvironment(double aFrequency) : LeafComponent( aFrequency) {
		appli = new Environment( this);
		delay = 0;
		delayMax = 0;
		newValue = false;
		isActive = true;
	}
compEnvironment::~compEnvironment()	{}

void compEnvironment::doOneStep() {
		if (newValue) {
			delay++;
			if (delay == delayMax) {
			}
		}
	}

void compEnvironment::doStep(int nStep) {	
		if (newValue) {
		}
		readInputs();
		appli->doStep(nStep);
		if (delayMax == 0) {
			newValue = false;
		} else {
			newValue = true;
			delay = 0;
		}
	}

void compEnvironment::readInputs() {
	}
void compEnvironment::initialize() {
		appli->initialize();
	}

void compEnvironment::end() {
		appli->end();
	}
	
	// +++++++++++++ Methods of the pItfEnvironment interface +++++++++++++
vect2 compEnvironment::getEnvLimits(){
		return appli->getEnvLimits();
	}

wect2 compEnvironment::getAssignedZone(long ID){
		return appli->getAssignedZone(ID);
	}

Environment *compEnvironment::getAppli() {
		return appli;
	}
	// +++++++++++++ Access for envSize parameter +++++++++++++
vect2 compEnvironment::getEnvSize() {
		return appli->getEnvSize();
	}
	
void compEnvironment::setEnvSize(vect2 arg) {
		appli->setEnvSize(arg);
	}
	// +++++++++++++ Access for maxInlineZones parameter +++++++++++++
long compEnvironment::getMaxInlineZones() {
		return appli->getMaxInlineZones();
	}
	
void compEnvironment::setMaxInlineZones(long arg) {
		appli->setMaxInlineZones(arg);
	}
	// +++++++++++++ Access for sweepNumber parameter +++++++++++++
long compEnvironment::getSweepNumber() {
		return appli->getSweepNumber();
	}
	
void compEnvironment::setSweepNumber(long arg) {
		appli->setSweepNumber(arg);
	}
	// +++++++++++++ Access for spiralNumber parameter +++++++++++++
long compEnvironment::getSpiralNumber() {
		return appli->getSpiralNumber();
	}
	
void compEnvironment::setSpiralNumber(long arg) {
		appli->setSpiralNumber(arg);
	}

