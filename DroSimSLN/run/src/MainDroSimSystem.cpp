/* 
 * Main for simulation
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

//#include "DroSimSystem.h"
#include "ScenarLog.h"
#include "myPositionsLogLogObservationComponent.h"
#include <tuple>
// Start of user code  : Additional imports for testDroSim
#include <string>
// End of user code

/* 
 * MainDroSimSystem for simulation
 *
 * Generated by Cares generator, written with Acceleo
 * Author: pyp
 */

//import cares.framework.JsonSeries;
//import cares.framework.LogComponent;
#include "DroSimSystem.h"
#include "ScenarLog.h"
//#include "PositionsLogLogObservationComponent.h"
// Start of user code  : Additional imports for testDroSim
// End of user code

int main() {
    auto* root = new DroSimSystem();
    vector<double> times;
    int successfulSims;
    do {
        successfulSims = 0;
        for (int i = 0; i < 5; i++) {
            //pyp : configuration des switches et autres actions
            root->get_ADroneSpiral()->stop();
            root->initialize();
            //pyp : run des observations
            auto* simulatedScenario = new ScenarLog(root);
            string si = to_string(i);
            string fileName = "PositionsLog";
            const string completeFileName = fileName + si;
            auto* PositionsLogLogObservationComponent = new
                myPositionsLogLogObservationComponent(completeFileName, 1.0);
            PositionsLogLogObservationComponent->setObjective(root->get_AObjective()->getAppli());
            PositionsLogLogObservationComponent->setDroneSweep(root->get_ADroneSweep()->getAppli());
            simulatedScenario->push(PositionsLogLogObservationComponent);


            simulatedScenario->setTime(0, 600000);
            auto simResult = simulatedScenario->startSimulation();
            if (get<0>(simResult)) successfulSims++;
            times.push_back(get<1>(simResult));
            root->end();
            simulatedScenario->end();
        }
    } while (root->mutateParameters(successfulSims >= 5 / 2, times));
    cout << "Lowest speed is " << root->getPSpeed();
    // Start of user code  : Additional code main for testDroSim
    // End of user code
}
